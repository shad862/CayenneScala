package org.apache.cayenne.scaladsl.server.test.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.apache.cayenne.scaladsl.server.test.model.Article;
import org.apache.cayenne.scaladsl.server.test.model.Reader;

/**
 * Class _ArticleReader was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ArticleReader extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Article> ARTICLE = Property.create("article", Article.class);
    public static final Property<Reader> READER = Property.create("reader", Reader.class);


    protected Object article;
    protected Object reader;

    public void setArticle(Article article) {
        setToOneTarget("article", article, true);
    }

    public Article getArticle() {
        return (Article)readProperty("article");
    }

    public void setReader(Reader reader) {
        setToOneTarget("reader", reader, true);
    }

    public Reader getReader() {
        return (Reader)readProperty("reader");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "article":
                return this.article;
            case "reader":
                return this.reader;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "article":
                this.article = val;
                break;
            case "reader":
                this.reader = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.article);
        out.writeObject(this.reader);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.article = in.readObject();
        this.reader = in.readObject();
    }

}
